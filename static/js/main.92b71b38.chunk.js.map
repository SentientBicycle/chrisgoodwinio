{"version":3,"sources":["modules/App/components/Header/Header.module.css","modules/Blog/Blog.module.css","modules/Main/Main.module.css","modules/DC/DC.module.css","modules/Modules/Modules.module.css","utils/css-concat.js","modules/App/components/Header/Header.js","modules/Blog/Blog.js","modules/Main/Main.js","modules/DC/DC.js","modules/Modules/Modules.js","modules/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","header","content","site-title","vert-center","link","selected","blog","main","dc","cssConcat","newString","_len","arguments","length","classes","Array","_key","map","a","concat","Header","props","context","siteTitleCss","styles","siteLinksCss","react_default","createElement","className","Link","to","contextTypes","router","PropTypes","object","Blog","style","Component","Main","DC","Modules","App","Header_Header","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","modules_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,OAAA,uBAAAC,QAAA,wBAAAC,aAAA,2BAAAC,cAAA,4BAAAC,KAAA,qBAAAC,SAAA,8CCAlBP,EAAAC,QAAA,CAAkBO,KAAA,wCCAlBR,EAAAC,QAAA,CAAkBQ,KAAA,wCCAlBT,EAAAC,QAAA,CAAkBS,GAAA,oCCAlBV,EAAAC,QAAA,CAAkBO,KAAA,8QCIJG,EAAY,WAAgB,IACxC,IAAIC,EAAY,GADwBC,EAAAC,UAAAC,OAAZC,EAAY,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAZF,EAAYE,GAAAJ,UAAAI,GAGxC,OADAF,EAAQG,IAAI,SAACC,GAAD,OAAQR,GAAS,GAAAS,OAAOD,EAAP,OACtBR,GCFF,SAASU,EAAOC,EAAOC,GAE7B,IAAMC,EAAed,EAAUe,IAAO,eAAgBA,IAAO,eACvDC,EAAehB,EAAUe,IAAOpB,MACrC,OACCsB,EAAAR,EAAAS,cAAA,WACED,EAAAR,EAAAS,cAAA,OAAKC,UAAWJ,IAAOxB,QACrB0B,EAAAR,EAAAS,cAAA,OAAKC,UAAWJ,IAAOvB,SACrByB,EAAAR,EAAAS,cAAA,MAAIC,UAAWL,GACdG,EAAAR,EAAAS,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,OAIDJ,EAAAR,EAAAS,cAAA,OAAKC,UAAWH,GACfC,EAAAR,EAAAS,cAACE,EAAA,EAAD,CAAMC,GAAG,SAAT,QAGAJ,EAAAR,EAAAS,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAT,WAGAJ,EAAAR,EAAAS,cAACE,EAAA,EAAD,CAAMC,GAAG,eAAT,sBAUVV,EAAOW,aAAe,CACpBC,OAAQC,IAAUC,QAOLd,yBC9BAe,mLARX,OACET,EAAAR,EAAAS,cAAA,OAAKC,UAAWQ,IAAM9B,MAAtB,uBAHa+B,8BCUJC,mLARX,OACEZ,EAAAR,EAAAS,cAAA,WAASC,UAAWQ,IAAM7B,MAA1B,yCAHa8B,8BCUJE,mLARX,OACEb,EAAAR,EAAAS,cAAA,OAAKC,UAAWQ,IAAM5B,IAAtB,sBAHW6B,8BCUFG,mLARX,OACEd,EAAAR,EAAAS,cAAA,OAAKC,UAAWQ,IAAM9B,MAAtB,kBAHgB+B,6BCyBPI,mLAfX,OACEf,EAAAR,EAAAS,cAAA,OAAKC,UAAU,OACbF,EAAAR,EAAAS,cAACe,EAAD,MACAhB,EAAAR,EAAAS,cAACgB,EAAA,EAAD,KACEjB,EAAAR,EAAAS,cAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjCZ,EAAAR,EAAAS,cAACiB,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWZ,IAC/BT,EAAAR,EAAAS,cAACiB,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWP,IAClCd,EAAAR,EAAAS,cAACiB,EAAA,EAAD,CAAOE,KAAK,cAAcC,UAAWR,aAX7BF,qBCEEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OACR5B,EAAAR,EAAAS,cAAC4B,EAAA,EAAD,KACC7B,EAAAR,EAAAS,cAAC6B,EAAD,OACUC,SAASC,eAAe,SDsH9B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.92b71b38.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3eIsf\",\"content\":\"Header_content__bjMF9\",\"site-title\":\"Header_site-title__FrTN_\",\"vert-center\":\"Header_vert-center__35Z61\",\"link\":\"Header_link__3fFMx\",\"selected\":\"Header_selected__1EoxR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blog\":\"Blog_blog__3nDMw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__4WOKJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dc\":\"DC_dc__DA9wb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blog\":\"Modules_blog__2TlYQ\"};","/**\n * Utility to consolidate and return classNames\n * from an arbitrary amount of inputs\n */\n\n export const cssConcat = (...classes) => {\n \tlet newString = '';\n \tclasses.map((a) => (newString += `${a} `));\n \treturn newString;\n }","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Header.module.css';\nimport { Link } from 'react-router-dom';\nimport { cssConcat } from '../../../../utils/css-concat';\n\nexport function Header(props, context) {\n\n\tconst siteTitleCss = cssConcat(styles['vert-center'], styles['site-title']);\n\tconst siteLinksCss = cssConcat(styles.link);\n  return (\n  \t<nav>\n\t    <div className={styles.header}>\n\t      <div className={styles.content}>\n\t        <h1 className={siteTitleCss}>\n\t        \t<Link to=\"/\">\n\t        \t\tCG\n\t        \t</Link>\n\t        </h1>\n\t        <div className={siteLinksCss}>\n\t        \t<Link to=\"/Blog\">\n\t        \t\tBlog\n\t        \t</Link>\n\t        \t<Link to=\"/Modules\">\n\t        \t\tModules\n\t        \t</Link>\n\t        \t<Link to=\"/DailyCoder\">\n\t        \t\tDaily&nbsp;Coder\n\t        \t</Link>\n\t        </div>\n\t      </div>\n\t    </div>\n\t</nav>\n  );\n}\n\nHeader.contextTypes = {\n  router: PropTypes.object,\n};\n\nHeader.propTypes = {\n\n};\n\nexport default Header;\n","import React, { Component } from 'react';\nimport style from './Blog.module.css';\n\n\nclass Blog extends Component {\n  render() {\n    return (\n      <div className={style.blog}>\n        I'm the Blog\n      </div>\n    );\n  }\n}\n\nexport default Blog;\n","import React, { Component } from 'react';\nimport style from './Main.module.css';\n\n\nclass Main extends Component {\n  render() {\n    return (\n      <section className={style.main}>\n        My information is mainly here.\n      </section>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport style from './DC.module.css';\n\n\nclass DC extends Component {\n  render() {\n    return (\n      <div className={style.dc}>\n        Daily Coder\n      </div>\n    );\n  }\n}\n\nexport default DC;\n","import React, { Component } from 'react';\nimport style from './Modules.module.css';\n\n\nclass Modules extends Component {\n  render() {\n    return (\n      <div className={style.blog}>\n        Modules\n      </div>\n    );\n  }\n}\n\nexport default Modules;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from './components/Header/Header';\nimport Blog from '../Blog/Blog';\nimport Main from '../Main/Main';\nimport DC from '../DC/DC';\nimport Modules from '../Modules/Modules'\nimport { Switch, Route } from 'react-router-dom'\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Switch>\n          <Route exact path='/' component={Main}/>\n          <Route path='/Blog' component={Blog}/>\n          <Route path='/Modules' component={Modules}/>\n          <Route path='/DailyCoder' component={DC}/>\n        </Switch>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './modules/App/App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\nimport 'normalize.css';\n\nReactDOM.render(\n\t<Router>\n\t\t<App />\n\t</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}